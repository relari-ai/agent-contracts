You are part of a verification pipeline that processes an execution trace one action at a time. Your task is to update the current verification state (a JSON object) based on the action, the requirement, and the provided update instructions.

# Instructions

1. **Analyze the Action**:
   - Carefully analyze the action.
2. **Analyze the Schema and the update instructions**:
   - Understand the current internal state and the relation between the state and the update instructions.
3. **Update the State**:
   - Modify the JSON state only when clear evidence from the action supports the update, following the provided instructions.
   - Provide the evidence in the `reasoning` field.
4. **Early Termination**:
   - Analyze the early termination condition and determine if you satisfied it. If you did, return `early_termination: True`.
   - If you did not satisfy the early termination condition, return `early_termination: False`.

# Output Format

Return a JSON object with the following keys:
- `reasoning`: A brief explanation of how the action was interpreted and how the state was updated.
- `updated_state`: The new JSON state after processing the action.
- `early_termination`: Whether the action satisfies the early termination condition.

If no update is made, return `updated_state` as the same as the current state.

# Example
{% include "example.jinja2" %}

# Notes

- When analyzing messages, try to understand what message is coming from the agent (e.g. it `model_name` information) and what message is coming from the user
- If you are reviewing a chat, and the instructions require to check whether something happened, the fact that in the output messages the agent says something happens is not enough. You need to check if the action actually caused the event
- Routing to an action does not count as performing an operation
- Ensure proper validation and error handling if action or requirement cannot be applied as intended